import { Country, Iso2 } from "./intl-tel-input/data";
import type { NumberType, SomeOptions, IntlTelInputInterface } from "./modules/types/public-api";
declare global {
    interface HTMLInputElement {
        iti?: Iti;
    }
}
export declare class Iti {
    id: number;
    promise: Promise<[unknown, unknown]>;
    private telInput;
    private highlightedItem;
    private options;
    private hadInitialPlaceholder;
    private isRTL;
    private showSelectedCountryOnLeft;
    private isAndroid;
    private selectedCountryData;
    private countries;
    private dialCodeMaxLen;
    private dialCodeToIso2Map;
    private dialCodes;
    private countryByIso2;
    private countryContainer;
    private selectedCountry;
    private selectedCountryInner;
    private selectedDialCode;
    private dropdownArrow;
    private dropdownContent;
    private searchInput;
    private searchIcon;
    private searchClearButton;
    private searchNoResults;
    private searchResultsA11yText;
    private countryList;
    private dropdown;
    private hiddenInput;
    private hiddenInputCountry;
    private maxCoreNumberLength;
    private defaultCountry;
    private originalPaddingRight;
    private originalPaddingLeft;
    private _handleHiddenInputSubmit;
    private _handleLabelClick;
    private _handleClickSelectedCountry;
    private _handleCountryContainerKeydown;
    private _handleInputEvent;
    private _handleKeydownEvent;
    private _handlePasteEvent;
    private _handleWindowScroll;
    private _handleMouseoverCountryList;
    private _handleClickCountryList;
    private _handleClickOffToClose;
    private _handleKeydownOnDropdown;
    private _handleSearchChange;
    private _handleSearchClear;
    private _handlePageLoad;
    private _doAttachUtils;
    private resolveAutoCountryPromise;
    private rejectAutoCountryPromise;
    private resolveUtilsScriptPromise;
    private rejectUtilsScriptPromise;
    /**
     * Build a space-delimited class string from an object map of className -> truthy/falsey.
     * Only keys with truthy values are included.
     */
    private static _buildClassNames;
    constructor(input: HTMLInputElement, customOptions?: SomeOptions);
    private _detectEnvironmentAndLayout;
    private _createInitPromises;
    _init(): void;
    private _processCountryData;
    private _generateMarkup;
    private _prepareTelInput;
    private _createWrapperAndInsert;
    private _maybeBuildCountryContainer;
    private _buildDropdownContent;
    private _buildSearchUI;
    private _maybeUpdateInputPaddingAndReveal;
    private _maybeBuildHiddenInputs;
    private _appendListItems;
    private _setInitialState;
    private _initListeners;
    private _initHiddenInputListener;
    private _initDropdownListeners;
    private _initRequests;
    private _loadAutoCountry;
    private _openDropdownWithPlus;
    private _initTelInputListeners;
    private _bindInputListener;
    private _maybeBindKeydownListener;
    private _maybeBindPasteListener;
    private _cap;
    private _trigger;
    private _openDropdown;
    private _setDropdownPosition;
    private _bindDropdownListeners;
    private _searchForCountry;
    private _filterCountries;
    private _getMatchedCountries;
    private _updateSearchResultsA11yText;
    private _handleUpDownKey;
    private _handleEnterKey;
    private _updateValFromNumber;
    private _updateCountryFromNumber;
    private _ensureHasDialCode;
    private _getNewCountryFromNumber;
    private _highlightListItem;
    private _setCountry;
    private _updateInputPadding;
    private _updateMaxLength;
    private _getHiddenSelectedCountryWidth;
    private _updatePlaceholder;
    private _selectListItem;
    private _closeDropdown;
    private _scrollTo;
    private _updateDialCode;
    private _getDialCode;
    private _getFullNumber;
    private _beforeSetNumber;
    private _triggerCountryChange;
    handleAutoCountry(): void;
    handleUtils(): void;
    destroy(): void;
    getExtension(): string;
    getNumber(format?: number): string;
    getNumberType(): number;
    getSelectedCountryData(): Partial<Country>;
    getValidationError(): number;
    isValidNumber(): boolean | null;
    isValidNumberPrecise(): boolean | null;
    private _utilsIsPossibleNumber;
    private _validateNumber;
    private _utilsIsValidNumber;
    setCountry(iso2: Iso2): void;
    setNumber(number: string): void;
    setPlaceholderNumberType(type: NumberType): void;
    setDisabled(disabled: boolean): void;
}
declare const intlTelInput: IntlTelInputInterface;
export default intlTelInput;
